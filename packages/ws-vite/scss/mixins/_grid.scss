@use 'sass:map';

@mixin grid() {

  @each $key in $grid {
    $variant: get-variant($key);

    // @debug map.get($refs, "grid#{$variant}-columns");

    .grid#{$variant} {
      --columns: var(--grid#{$variant}-columns, 12);
      --column-gap: var(--grid#{$variant}-column-gap, 0);
      --row-gap: var(--grid#{$variant}-row-gap, 0);
      display: grid;
      grid-template-columns: repeat(var(--columns), minmax(0, 1fr));
      grid-column-gap: var(--column-gap);
      grid-row-gap: var(--row-gap);

      &>* {
        grid-column: span var(--columns) / auto;
      }
    }
  }

  // $grid-columns-raw: 12 !default;
  $grid-columns: 24;

  @each $key, $size in $breakpoint {
    @if index(($breakpoint), ($key $size))==1 {
      @for $i from 1 through $grid-columns {

        .grid-#{$i},
        .grid-#{$key}-#{$i} {
          grid-column: span $i / auto;

          @each $key in $grid {
            $variant: get-variant($key);

            &.grid#{$variant},
            &>.grid#{$variant} {
              --columns: #{$i};
            }
          }
        }
      }
    }

    @else {
      @media (min-width:$size) {
        @for $i from 1 through $grid-columns {
          .grid-#{$key}-#{$i} {
            grid-column: span $i / auto;

            @each $key in $grid {
              $variant: get-variant($key);

              &.grid#{$variant},
              &>.grid#{$variant} {
                --columns: #{$i};
              }
            }
          }
        }
      }
    }
  }

  @each $key, $size in $breakpoint {
    @if index(($breakpoint), ($key $size))==1 {
      @for $i from 2 through $grid-columns {

        .end-#{$i},
        .end-#{$key}-#{$i} {
          grid-column-end: $i + 1;
        }
      }
    }

    @else {
      @media (min-width:$size) {
        @for $i from 2 through $grid-columns {
          .end-#{$key}-#{$i} {
            grid-column-end: $i + 1;
          }
        }
      }
    }
  }

  // @debug $refs;

}
